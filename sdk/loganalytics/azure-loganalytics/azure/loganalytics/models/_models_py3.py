# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Column(Model):
    """A table column.

    A column in a table.

    :param name: The name of this column.
    :type name: str
    :param type: The data type of this column.
    :type type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, type: str=None, **kwargs) -> None:
        super(Column, self).__init__(**kwargs)
        self.name = name
        self.type = type


class ErrorDetail(Model):
    """Error details.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. The error's code.
    :type code: str
    :param message: Required. A human readable error message.
    :type message: str
    :param target: Indicates which property in the request is responsible for
     the error.
    :type target: str
    :param value: Indicates which value in 'target' is responsible for the
     error.
    :type value: str
    :param resources: Indicates resources which were responsible for the
     error.
    :type resources: list[str]
    :param additional_properties:
    :type additional_properties: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'resources': {'key': 'resources', 'type': '[str]'},
        'additional_properties': {'key': 'additionalProperties', 'type': 'object'},
    }

    def __init__(self, *, code: str, message: str, target: str=None, value: str=None, resources=None, additional_properties=None, **kwargs) -> None:
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.value = value
        self.resources = resources
        self.additional_properties = additional_properties


class ErrorInfo(Model):
    """The code and message for an error.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. A machine readable error code.
    :type code: str
    :param message: Required. A human readable error message.
    :type message: str
    :param details: error details.
    :type details: list[~azure.loganalytics.models.ErrorDetail]
    :param innererror: Inner error details if they exist.
    :type innererror: ~azure.loganalytics.models.ErrorInfo
    :param additional_properties:
    :type additional_properties: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'ErrorInfo'},
        'additional_properties': {'key': 'additionalProperties', 'type': 'object'},
    }

    def __init__(self, *, code: str, message: str, details=None, innererror=None, additional_properties=None, **kwargs) -> None:
        super(ErrorInfo, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = details
        self.innererror = innererror
        self.additional_properties = additional_properties


class ErrorResponse(Model):
    """Error details.

    Contains details when the response code indicates an error.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The error details.
    :type error: ~azure.loganalytics.models.ErrorInfo
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorInfo'},
    }

    def __init__(self, *, error, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class MetadataApplication(Model):
    """MetadataApplication.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param resource_id: Required.
    :type resource_id: str
    :param name: Required.
    :type name: str
    :param region: Required.
    :type region: str
    :param related:
    :type related: ~azure.loganalytics.models.MetadataApplicationRelated
    """

    _validation = {
        'id': {'required': True},
        'resource_id': {'required': True},
        'name': {'required': True},
        'region': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'related': {'key': 'related', 'type': 'MetadataApplicationRelated'},
    }

    def __init__(self, *, id: str, resource_id: str, name: str, region: str, related=None, **kwargs) -> None:
        super(MetadataApplication, self).__init__(**kwargs)
        self.id = id
        self.resource_id = resource_id
        self.name = name
        self.region = region
        self.related = related


class MetadataApplicationRelated(Model):
    """MetadataApplicationRelated.

    :param tables:
    :type tables: list[str]
    :param functions:
    :type functions: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
    }

    def __init__(self, *, tables=None, functions=None, **kwargs) -> None:
        super(MetadataApplicationRelated, self).__init__(**kwargs)
        self.tables = tables
        self.functions = functions


class MetadataCategory(Model):
    """MetadataCategory.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param display_name: Required.
    :type display_name: str
    :param description:
    :type description: str
    :param related:
    :type related: ~azure.loganalytics.models.MetadataCategoryRelated
    """

    _validation = {
        'id': {'required': True},
        'display_name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'related': {'key': 'related', 'type': 'MetadataCategoryRelated'},
    }

    def __init__(self, *, id: str, display_name: str, description: str=None, related=None, **kwargs) -> None:
        super(MetadataCategory, self).__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.description = description
        self.related = related


class MetadataCategoryRelated(Model):
    """MetadataCategoryRelated.

    :param tables:
    :type tables: list[str]
    :param functions:
    :type functions: list[str]
    :param resource_types:
    :type resource_types: list[str]
    :param queries:
    :type queries: list[str]
    :param solutions:
    :type solutions: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
    }

    def __init__(self, *, tables=None, functions=None, resource_types=None, queries=None, solutions=None, **kwargs) -> None:
        super(MetadataCategoryRelated, self).__init__(**kwargs)
        self.tables = tables
        self.functions = functions
        self.resource_types = resource_types
        self.queries = queries
        self.solutions = solutions


class MetadataFunction(Model):
    """MetadataFunction.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param name: Required.
    :type name: str
    :param parameters:
    :type parameters: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param body: Required.
    :type body: str
    :param tags:
    :type tags: object
    :param properties:
    :type properties: object
    :param related:
    :type related: ~azure.loganalytics.models.MetadataFunctionRelated
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'body': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'body': {'key': 'body', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataFunctionRelated'},
    }

    def __init__(self, *, id: str, name: str, body: str, parameters: str=None, display_name: str=None, description: str=None, tags=None, properties=None, related=None, **kwargs) -> None:
        super(MetadataFunction, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.parameters = parameters
        self.display_name = display_name
        self.description = description
        self.body = body
        self.tags = tags
        self.properties = properties
        self.related = related


class MetadataFunctionRelated(Model):
    """MetadataFunctionRelated.

    :param tables:
    :type tables: list[str]
    :param solutions:
    :type solutions: list[str]
    :param resource_types:
    :type resource_types: list[str]
    :param categories:
    :type categories: list[str]
    :param workspaces:
    :type workspaces: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
    }

    def __init__(self, *, tables=None, solutions=None, resource_types=None, categories=None, workspaces=None, **kwargs) -> None:
        super(MetadataFunctionRelated, self).__init__(**kwargs)
        self.tables = tables
        self.solutions = solutions
        self.resource_types = resource_types
        self.categories = categories
        self.workspaces = workspaces


class MetadataPermissions(Model):
    """MetadataPermissions.

    All required parameters must be populated in order to send to Azure.

    :param workspaces: Required.
    :type workspaces:
     list[~azure.loganalytics.models.MetadataPermissionsWorkspacesItem]
    :param resources:
    :type resources:
     list[~azure.loganalytics.models.MetadataPermissionsResourcesItem]
    :param applications:
    :type applications:
     list[~azure.loganalytics.models.MetadataPermissionsApplicationsItem]
    """

    _validation = {
        'workspaces': {'required': True},
    }

    _attribute_map = {
        'workspaces': {'key': 'workspaces', 'type': '[MetadataPermissionsWorkspacesItem]'},
        'resources': {'key': 'resources', 'type': '[MetadataPermissionsResourcesItem]'},
        'applications': {'key': 'applications', 'type': '[MetadataPermissionsApplicationsItem]'},
    }

    def __init__(self, *, workspaces, resources=None, applications=None, **kwargs) -> None:
        super(MetadataPermissions, self).__init__(**kwargs)
        self.workspaces = workspaces
        self.resources = resources
        self.applications = applications


class MetadataPermissionsApplicationsItem(Model):
    """MetadataPermissionsApplicationsItem.

    All required parameters must be populated in order to send to Azure.

    :param resource_id: Required.
    :type resource_id: str
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(self, *, resource_id: str, **kwargs) -> None:
        super(MetadataPermissionsApplicationsItem, self).__init__(**kwargs)
        self.resource_id = resource_id


class MetadataPermissionsResourcesItem(Model):
    """MetadataPermissionsResourcesItem.

    All required parameters must be populated in order to send to Azure.

    :param resource_id: Required.
    :type resource_id: str
    :param deny_tables:
    :type deny_tables: list[str]
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'deny_tables': {'key': 'denyTables', 'type': '[str]'},
    }

    def __init__(self, *, resource_id: str, deny_tables=None, **kwargs) -> None:
        super(MetadataPermissionsResourcesItem, self).__init__(**kwargs)
        self.resource_id = resource_id
        self.deny_tables = deny_tables


class MetadataPermissionsWorkspacesItem(Model):
    """MetadataPermissionsWorkspacesItem.

    All required parameters must be populated in order to send to Azure.

    :param resource_id: Required.
    :type resource_id: str
    :param deny_tables:
    :type deny_tables: list[str]
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'deny_tables': {'key': 'denyTables', 'type': '[str]'},
    }

    def __init__(self, *, resource_id: str, deny_tables=None, **kwargs) -> None:
        super(MetadataPermissionsWorkspacesItem, self).__init__(**kwargs)
        self.resource_id = resource_id
        self.deny_tables = deny_tables


class MetadataQuery(Model):
    """MetadataQuery.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param body: Required.
    :type body: str
    :param labels:
    :type labels: list[str]
    :param tags:
    :type tags: object
    :param properties:
    :type properties: object
    :param related:
    :type related: ~azure.loganalytics.models.MetadataQueryRelated
    """

    _validation = {
        'id': {'required': True},
        'body': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'body': {'key': 'body', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataQueryRelated'},
    }

    def __init__(self, *, id: str, body: str, display_name: str=None, description: str=None, labels=None, tags=None, properties=None, related=None, **kwargs) -> None:
        super(MetadataQuery, self).__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.description = description
        self.body = body
        self.labels = labels
        self.tags = tags
        self.properties = properties
        self.related = related


class MetadataQueryRelated(Model):
    """MetadataQueryRelated.

    :param categories:
    :type categories: list[str]
    :param solutions:
    :type solutions: list[str]
    :param resource_types:
    :type resource_types: list[str]
    :param tables:
    :type tables: list[str]
    """

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'tables': {'key': 'tables', 'type': '[str]'},
    }

    def __init__(self, *, categories=None, solutions=None, resource_types=None, tables=None, **kwargs) -> None:
        super(MetadataQueryRelated, self).__init__(**kwargs)
        self.categories = categories
        self.solutions = solutions
        self.resource_types = resource_types
        self.tables = tables


class MetadataResourceType(Model):
    """MetadataResourceType.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param type: Required.
    :type type: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param labels:
    :type labels: list[str]
    :param tags:
    :type tags: object
    :param properties:
    :type properties: object
    :param related:
    :type related: ~azure.loganalytics.models.MetadataResourceTypeRelated
    """

    _validation = {
        'id': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataResourceTypeRelated'},
    }

    def __init__(self, *, id: str, type: str, display_name: str=None, description: str=None, labels=None, tags=None, properties=None, related=None, **kwargs) -> None:
        super(MetadataResourceType, self).__init__(**kwargs)
        self.id = id
        self.type = type
        self.display_name = display_name
        self.description = description
        self.labels = labels
        self.tags = tags
        self.properties = properties
        self.related = related


class MetadataResourceTypeRelated(Model):
    """MetadataResourceTypeRelated.

    :param tables:
    :type tables: list[str]
    :param functions:
    :type functions: list[str]
    :param categories:
    :type categories: list[str]
    :param queries:
    :type queries: list[str]
    :param workspaces:
    :type workspaces: list[str]
    :param resources:
    :type resources: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
        'resources': {'key': 'resources', 'type': '[str]'},
    }

    def __init__(self, *, tables=None, functions=None, categories=None, queries=None, workspaces=None, resources=None, **kwargs) -> None:
        super(MetadataResourceTypeRelated, self).__init__(**kwargs)
        self.tables = tables
        self.functions = functions
        self.categories = categories
        self.queries = queries
        self.workspaces = workspaces
        self.resources = resources


class MetadataResults(Model):
    """The metadata result for the app, including available tables, etc.

    :param categories:
    :type categories: list[~azure.loganalytics.models.MetadataCategory]
    :param resource_types:
    :type resource_types:
     list[~azure.loganalytics.models.MetadataResourceType]
    :param solutions:
    :type solutions: list[~azure.loganalytics.models.MetadataSolution]
    :param tables:
    :type tables: list[~azure.loganalytics.models.MetadataTable]
    :param functions:
    :type functions: list[~azure.loganalytics.models.MetadataFunction]
    :param queries:
    :type queries: list[~azure.loganalytics.models.MetadataQuery]
    :param applications:
    :type applications: list[~azure.loganalytics.models.MetadataApplication]
    :param workspaces:
    :type workspaces: list[~azure.loganalytics.models.MetadataWorkspace]
    :param resources:
    :type resources: list[object]
    :param permissions:
    :type permissions: list[~azure.loganalytics.models.MetadataPermissions]
    """

    _validation = {
        'categories': {'unique': True},
        'resource_types': {'unique': True},
        'solutions': {'unique': True},
        'tables': {'unique': True},
        'functions': {'unique': True},
        'queries': {'unique': True},
        'applications': {'unique': True},
        'workspaces': {'unique': True},
        'resources': {'unique': True},
        'permissions': {'unique': True},
    }

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[MetadataCategory]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[MetadataResourceType]'},
        'solutions': {'key': 'solutions', 'type': '[MetadataSolution]'},
        'tables': {'key': 'tables', 'type': '[MetadataTable]'},
        'functions': {'key': 'functions', 'type': '[MetadataFunction]'},
        'queries': {'key': 'queries', 'type': '[MetadataQuery]'},
        'applications': {'key': 'applications', 'type': '[MetadataApplication]'},
        'workspaces': {'key': 'workspaces', 'type': '[MetadataWorkspace]'},
        'resources': {'key': 'resources', 'type': '[object]'},
        'permissions': {'key': 'permissions', 'type': '[MetadataPermissions]'},
    }

    def __init__(self, *, categories=None, resource_types=None, solutions=None, tables=None, functions=None, queries=None, applications=None, workspaces=None, resources=None, permissions=None, **kwargs) -> None:
        super(MetadataResults, self).__init__(**kwargs)
        self.categories = categories
        self.resource_types = resource_types
        self.solutions = solutions
        self.tables = tables
        self.functions = functions
        self.queries = queries
        self.applications = applications
        self.workspaces = workspaces
        self.resources = resources
        self.permissions = permissions


class MetadataSolution(Model):
    """MetadataSolution.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param name: Required.
    :type name: str
    :param display_name:
    :type display_name: str
    :param description:
    :type description: str
    :param tags:
    :type tags: object
    :param properties:
    :type properties: object
    :param related: Required.
    :type related: ~azure.loganalytics.models.MetadataSolutionRelated
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'related': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataSolutionRelated'},
    }

    def __init__(self, *, id: str, name: str, related, display_name: str=None, description: str=None, tags=None, properties=None, **kwargs) -> None:
        super(MetadataSolution, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.display_name = display_name
        self.description = description
        self.tags = tags
        self.properties = properties
        self.related = related


class MetadataSolutionRelated(Model):
    """MetadataSolutionRelated.

    All required parameters must be populated in order to send to Azure.

    :param tables: Required.
    :type tables: list[str]
    :param functions:
    :type functions: list[str]
    :param categories:
    :type categories: list[str]
    :param queries:
    :type queries: list[str]
    :param workspaces:
    :type workspaces: list[str]
    """

    _validation = {
        'tables': {'required': True},
    }

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
    }

    def __init__(self, *, tables, functions=None, categories=None, queries=None, workspaces=None, **kwargs) -> None:
        super(MetadataSolutionRelated, self).__init__(**kwargs)
        self.tables = tables
        self.functions = functions
        self.categories = categories
        self.queries = queries
        self.workspaces = workspaces


class MetadataTable(Model):
    """MetadataTable.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param name: Required.
    :type name: str
    :param description:
    :type description: str
    :param timespan_column:
    :type timespan_column: str
    :param labels:
    :type labels: list[str]
    :param tags:
    :type tags: object
    :param properties:
    :type properties: object
    :param columns:
    :type columns: list[~azure.loganalytics.models.MetadataTableColumnsItem]
    :param related:
    :type related: ~azure.loganalytics.models.MetadataTableRelated
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'timespan_column': {'key': 'timespanColumn', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'columns': {'key': 'columns', 'type': '[MetadataTableColumnsItem]'},
        'related': {'key': 'related', 'type': 'MetadataTableRelated'},
    }

    def __init__(self, *, id: str, name: str, description: str=None, timespan_column: str=None, labels=None, tags=None, properties=None, columns=None, related=None, **kwargs) -> None:
        super(MetadataTable, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.description = description
        self.timespan_column = timespan_column
        self.labels = labels
        self.tags = tags
        self.properties = properties
        self.columns = columns
        self.related = related


class MetadataTableColumnsItem(Model):
    """MetadataTableColumnsItem.

    All required parameters must be populated in order to send to Azure.

    :param name: Required.
    :type name: str
    :param description:
    :type description: str
    :param type: Required. Possible values include: 'bool', 'datetime',
     'dynamic', 'int', 'long', 'real', 'string'
    :type type: str or ~azure.loganalytics.models.MetadataColumnDataType
    :param is_preferred_facet:
    :type is_preferred_facet: bool
    :param source:
    :type source: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'is_preferred_facet': {'key': 'isPreferredFacet', 'type': 'bool'},
        'source': {'key': 'source', 'type': 'object'},
    }

    def __init__(self, *, name: str, type, description: str=None, is_preferred_facet: bool=None, source=None, **kwargs) -> None:
        super(MetadataTableColumnsItem, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.type = type
        self.is_preferred_facet = is_preferred_facet
        self.source = source


class MetadataTableRelated(Model):
    """MetadataTableRelated.

    :param categories:
    :type categories: list[str]
    :param solutions:
    :type solutions: list[str]
    :param resource_types:
    :type resource_types: list[str]
    :param workspaces:
    :type workspaces: list[str]
    :param functions:
    :type functions: list[str]
    :param queries:
    :type queries: list[str]
    """

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
    }

    def __init__(self, *, categories=None, solutions=None, resource_types=None, workspaces=None, functions=None, queries=None, **kwargs) -> None:
        super(MetadataTableRelated, self).__init__(**kwargs)
        self.categories = categories
        self.solutions = solutions
        self.resource_types = resource_types
        self.workspaces = workspaces
        self.functions = functions
        self.queries = queries


class MetadataWorkspace(Model):
    """MetadataWorkspace.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: str
    :param resource_id: Required.
    :type resource_id: str
    :param name: Required.
    :type name: str
    :param region: Required.
    :type region: str
    :param related:
    :type related: ~azure.loganalytics.models.MetadataWorkspaceRelated
    """

    _validation = {
        'id': {'required': True},
        'resource_id': {'required': True},
        'name': {'required': True},
        'region': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'related': {'key': 'related', 'type': 'MetadataWorkspaceRelated'},
    }

    def __init__(self, *, id: str, resource_id: str, name: str, region: str, related=None, **kwargs) -> None:
        super(MetadataWorkspace, self).__init__(**kwargs)
        self.id = id
        self.resource_id = resource_id
        self.name = name
        self.region = region
        self.related = related


class MetadataWorkspaceRelated(Model):
    """MetadataWorkspaceRelated.

    :param tables:
    :type tables: list[str]
    :param solutions:
    :type solutions: list[str]
    :param resource_types:
    :type resource_types: list[str]
    :param functions:
    :type functions: list[str]
    :param resources:
    :type resources: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'resources': {'key': 'resources', 'type': '[str]'},
    }

    def __init__(self, *, tables=None, solutions=None, resource_types=None, functions=None, resources=None, **kwargs) -> None:
        super(MetadataWorkspaceRelated, self).__init__(**kwargs)
        self.tables = tables
        self.solutions = solutions
        self.resource_types = resource_types
        self.functions = functions
        self.resources = resources


class QueryBody(Model):
    """The Analytics query. Learn more about the [Analytics query
    syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/).

    All required parameters must be populated in order to send to Azure.

    :param query: Required. The query to execute.
    :type query: str
    :param timespan: Optional. The timespan over which to query data. This is
     an ISO8601 time period value.  This timespan is applied in addition to any
     that are specified in the query expression.
    :type timespan: str
    :param workspaces: A list of workspaces that are included in the query.
    :type workspaces: list[str]
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'timespan': {'key': 'timespan', 'type': 'str'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
    }

    def __init__(self, *, query: str, timespan: str=None, workspaces=None, **kwargs) -> None:
        super(QueryBody, self).__init__(**kwargs)
        self.query = query
        self.timespan = timespan
        self.workspaces = workspaces


class QueryResults(Model):
    """A query response.

    Contains the tables, columns & rows resulting from a query.

    All required parameters must be populated in order to send to Azure.

    :param tables: Required. The list of tables, columns and rows.
    :type tables: list[~azure.loganalytics.models.Table]
    """

    _validation = {
        'tables': {'required': True},
    }

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[Table]'},
    }

    def __init__(self, *, tables, **kwargs) -> None:
        super(QueryResults, self).__init__(**kwargs)
        self.tables = tables


class Table(Model):
    """A query response table.

    Contains the columns and rows for one table in a query response.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the table.
    :type name: str
    :param columns: Required. The list of columns in this table.
    :type columns: list[~azure.loganalytics.models.Column]
    :param rows: Required. The resulting rows from this query.
    :type rows: list[list[object]]
    """

    _validation = {
        'name': {'required': True},
        'columns': {'required': True},
        'rows': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'columns': {'key': 'columns', 'type': '[Column]'},
        'rows': {'key': 'rows', 'type': '[[object]]'},
    }

    def __init__(self, *, name: str, columns, rows, **kwargs) -> None:
        super(Table, self).__init__(**kwargs)
        self.name = name
        self.columns = columns
        self.rows = rows
